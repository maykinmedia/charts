global:
  configuration:
    enabled: false
    secrets: {}

configuration:
  enabled: false
  initContainer:
    # -- Run the setup configuration command in a init container
    enabled: false
  job:
    # -- Run the setup configuration command as a job
    enabled: true
    backoffLimit: 6
    # -- 0 Will clean the job after it is finished
    ttlSecondsAfterFinished: 0    
    restartPolicy: OnFailure
    # Note, this field is immutable
    resources: {}
      # limits:
      #   cpu: 200m
      #   memory: 256Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  secrets: {}
  data: ""

tags:
  redis: true

replicaCount: 1

image:
  repository: maykinmedia/open-archiefbeheer
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  className: ""
  # -- ingress hosts
  hosts: []
  #  - host: openarchiefbeheer.gemeente.nl
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: openarchiefbeheer-tls
  #    hosts:
  #      - openarchiefbeheer.gemeente.nl

extraIngress: []
# e.g:
# extraIngress:
#  - name: openarchiefbeheer-azuregateway
#    annotations:
#      appgw.ingress.kubernetes.io/ssl-redirect: "true"
#    className: azure-application-gateway
#    hosts:
#      - host: openarchiefbeheer.gemeente.nl
#        paths:
#          - path: /
#            pathType: ImplementationSpecific
#            servicename: openklant
#            portNumber: 8000
#    tls:
#      - secretName: openarchiefbeheer-tls
#        hosts:
#          - "openarchiefbeheer.gemeente.nl"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  size: 1Gi
  storageClassName: ""
  existingClaim: null
  mediaMountSubpath: openarchiefbeheer/media
  privateMediaMountSubpath: openarchiefbeheer/private_media

# Existing Secret must be defined for AzureVaultSecret to work
existingSecret: null


# This will create an AzureVaultSecret object in k8s, only Multi Key Value Secret are supported by this chart
# ref: https://akv2k8s.io/tutorials/sync/4-multi-key-value-secret/ https://learn.microsoft.com/en-us/azure/key-vault/secrets/multiline-secrets
# Using this feature requires you to define existingSecret
azureVaultSecret:
  # The name of the Azure Key Vault, setting this will create the AzureVaultSecret
  vaultName: null
  # The name of the Multi Key Value Secret
  objectName: ""
  # Make sure this matches the content of the secret, can be either 'application/x-json' or 'application/x-yaml'
  contentType: ""
  # You must set .Values.existingSecret
  secretName: "{{ .Values.existingSecret }}"

extraEnvVars: []
extraVolumes: []
extraVolumeMounts: []

pythonAppName: openarchiefbeheer
settings:
  allowedHosts: ""
  djangoSettingsModule: openarchiefbeheer.conf.docker
  # -- Generate secret key at https://djecrety.ir/
  secretKey: ""
  environment: ""
  requestsReadTimeout: "30"
  # -- Number of days to wait before destroying a list. Defaults to 7 in the application.
  waitingPeriod: ""

  database:
    host: ""
    port: 5432
    username: ""
    password: ""
    name: ""
    sslmode: prefer

  cookie:
    sessionCookieSamesite: 'Lax'
    sessionCookieSecure: true
    csrfCookieSamesite: 'Lax'
    csrfCookieSecure: true

  cors:
    allowedOrigins: ""
    allowedOriginsRegexes: ""
    allowAllOrigins: false
    extraAllowHeaders: ""

  throttling:
    enable: true
    rateAnonymous: "2500/hour"
    rateUser: "15000/hour"

  csrf:
    trustedOrigins: ""

  sentry:
    dsn: ""

  cache:
    default: ""
    axes: ""
    choices: ""

  celery:
    brokerUrl: ""
    resultBackend: ""
    logLevel: debug

  debug: false

  email:
    host: localhost
    port: 25
    username: ""
    password: ""
    useTLS: false
    defaultFrom: ""
    
  uwsgi:
    master: ''
    threads: ''
    processes: ''
    maxRequests: ''
    harakiri: ''

  frontend:
    apiUrl: ""
    apiPath: "/api/v1"
    zaakUrlTemplate: ""

  frontendUrl: ""
  retry:
    total: ""
    backoffFactor: ""
    statusForcelist: ""

worker:
  label: "1"
  name: ""
  queueName: ""
  replicaCount: 1
  concurrency: 4
  podLabels: {}
  resources: {}
  livenessProbe: 
    enabled: false
    exec:
      command:
        - /app/liveness/liveness-probe.sh
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

flower:
  enabled: true
  replicaCount: 1
  podLabels: {}
  service:
    type: ClusterIP
    port: 80
  livenessProbe: {}
  readinessProbe: {}
  resources: {}

beat:
  enabled: true
  replicaCount: 1
  podLabels: {}
  livenessProbe: {}
  readinessProbe: {}
  resources: {}

nginx:
  image:
    repository: nginxinc/nginx-unprivileged
    pullPolicy: IfNotPresent
    tag: stable
  existingConfigmap: null
  # extraVolumes Optionally specify extra list of additional volumes
  # e.g:
  # extraVolumes:
  #   - name: tmp
  #     emptyDir: {}
  #
  extraVolumes: []
  # extraVolumeMounts Optionally specify extra list of additional volumeMounts
  # e.g:
  # extraVolumeMounts:
  #   - name: tmp
  #     mountPath: /tmp
  extraVolumeMounts: []
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  replicaCount: 1
  podLabels: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101
  autoscaling:
    enabled: false
  livenessProbe: {}
  readinessProbe: {}
  resources: {}

##################
# Redis subchart #
##################
redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      requests:
        cpu: 10m
        memory: 20Mi