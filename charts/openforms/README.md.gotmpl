# Open Forms Chart

{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## Introduction 

This chart can be used to deploy Open Forms on a Kubernetes cluster using the Helm package manager.

* [Source code](https://github.com/open-formulieren/open-forms/)
* [Documentation](https://open-forms.readthedocs.io/)
* [Docker image](https://hub.docker.com/r/openformulieren/open-forms)
* [Changelog](https://open-forms.readthedocs.io/en/stable/changelog.html)

## Quickstart

```bash
helm repo add maykinmedia https://maykinmedia.github.io/charts/
helm install {{ template "chart.name" . }} maykinmedia/{{ template "chart.name" . }}
```

{{ template "chart.requirementsSection" . }}

## Configuration and installation details

### Django specific configuration

**Secret key**

Django makes use of a secret key to provide cryptographic signing. 
This key should be set to a unique, unpredictable value. 
Without the `SECRET_KEY` environment variable, the application will not start.

The key can be configured with the value `settings.secretKey`. You can use a [web tool](https://djecrety.ir/) to generate it. 

**Warning**: Running with a known secret key defeats many of Django’s security protections and can lead to privilege escalation and remote code execution vulnerabilities. 

### Automatic configuration

The application can be automatically configured with `django-setup-configuration`. 
To enable the automatic configuration, the following values should be set:

```yaml
global:
  configuration:
    enabled: true

configuration:
  enabled: true
  job:
    enabled: true
```

The yaml data needed to configure the application should be provided in the value `configuration.data`. To see
how to configure, see the Open Forms [documetation](https://open-forms.readthedocs.io/en/stable/installation/setup_configuration.html#installation-configuration-cli).

### Sentry

Open Forms makes use of [Sentry](https://sentry.io/welcome/) for automatic reporting of errors. 
In order to configure it, the value `settings.sentry.dsn` needs to be set. To see where to find the `DSN`, see
the [Sentry documentation](https://docs.sentry.io/concepts/key-terms/dsn-explainer/#where-to-find-your-data-source-name-dsn).  

```yaml
settings:
  sentry:
    dsn: "https://public@sentry.example.com/1"
```

The value of the `DSN` is considered sensitive, so it should be handled as a secret.

### Open Telemetry

Open Forms supports the Open Telemetry Protocol.

We recommend deploying one or more Open Telemetry Collector instances in your cluster to receive
telemetry. Alternatively, you can use any vendor that speaks the OTLP protocol.

The environment variables that the Open Telemetry SDK supports can be found [here](https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#general-sdk-configuration).

### Static File Serving

The OpenForms Helm chart supports nginx-based static file serving for improved performance and reduced load on the application server. This feature allows nginx to serve static files (CSS, JavaScript, images) directly without proxying requests to the uWSGI application.

#### Requirements

- **OpenForms Version**: 3.3.0 or higher
- **Chart Configuration**: `nginx.staticFileServing.enabled: true`

> **Important**: Static file serving is **enabled by default** (`enabled: true`). You can disable it by setting `nginx.staticFileServing.enabled: false` in your values.

#### How It Works

When static file serving is enabled:

1. **File Collection**: The web container collects static files during startup and copies them to a shared volume
2. **Shared Storage**: Both the web and nginx containers mount the same PVC subPath (`openforms/static`) 
3. **Direct Serving**: Nginx serves static files directly from `/srv/static/` instead of proxying to uWSGI
4. **Performance**: Reduces application server load and improves response times for static assets

#### Configuration

```yaml
nginx:
  staticFileServing:
    enabled: true
```

#### Architecture

The static file serving feature uses the existing media PVC with subPaths to organize storage:

- **PVC**: `openforms` (shared between media and static files)
- **Media subPath**: `openforms/media` → `/app/media` (web container)
- **Static subPath**: `openforms/static` → `/srv/static` (both containers)

{{ template "chart.valuesSection" . }}
