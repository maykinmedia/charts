global:
  settings:
    # -- Global databasehost, overrides setting.database.host
    databaseHost: ""
  configuration:
    enabled: false
    secrets: {}

configuration:
  enabled: false
  initContainer:
    # -- Run the setup configuration command in a init container
    enabled: false
  job:
    # -- Run the setup configuration command as a job
    enabled: true
    backoffLimit: 6
    # -- 0 Will clean the job after it is finished
    ttlSecondsAfterFinished: 0    
    restartPolicy: OnFailure
    # Note, this field is immutable
    resources: {}
      # limits:
      #   cpu: 200m
      #   memory: 256Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  secrets: {}
  data: ""
  # e.g.
  # data: |-
      # tokenauth_config_enable: true
      # tokenauth:
      #   items:
      #     - identifier: openinwoner-token
      #       token: ${openklant_openinwoner_token}
      #       contact_person: Person 1
      #       email: test@example.com
      #       organization: Organization XYZ
      #       application: Application XYZ
      #       administration: Administration XYZ
      # oidc_db_config_enable: True
      # oidc_db_config_admin_auth:
      #   items:
      #   - identifier: admin-oidc
      #     enabled: True
      #     oidc_rp_client_id: openklant.example.nl
      #     oidc_rp_client_secret: ${keycloak_client_secret}
      #     oidc_rp_scopes_list:
      #     - openid
      #     - email
      #     - profile
      #     - roles
      #     oidc_rp_sign_algo: RS256
      #     endpoint_config:
      #       oidc_op_discovery_endpoint: https://keycloak.example.nl/realms/example/
      #     username_claim:
      #     - sub
      #     groups_claim:
      #     - roles
      #     claim_mapping:
      #       first_name:
      #       - given_name
      #       last_name:
      #       - family_name
      #       email:
      #       - email
      #     sync_groups: true
      #     sync_groups_glob_pattern: "*"
      #     default_groups: []
      #     make_users_staff: true
      #     superuser_group_names:
      #     - Superuser
      #     oidc_use_nonce: true
      #     oidc_nonce_size: 32
      #     oidc_state_size: 32
      #     userinfo_claims_source: id_token

tags:
  redis: true

replicaCount: 2

image:
  repository: maykinmedia/open-klant
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  className: ""
  # -- ingress hosts
  hosts: []
  #  - host: openklant.gemeente.nl
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: openklant-tls
  #    hosts:
  #      - openklant.gemeente.nl

# -- Specify extra ingresses, for example if you have multiple ingress classes
extraIngress: []
# e.g:
# extraIngress:
#  - name: openklant-azuregateway
#    annotations:
#      appgw.ingress.kubernetes.io/ssl-redirect: "true"
#    className: azure-application-gateway
#    hosts:
#      - host: openklant.gemeente.nl
#        paths:
#          - path: /
#            pathType: ImplementationSpecific
#            servicename: openklant
#            portNumber: 8000
#    tls:
#      - secretName: openklant-tls
#        hosts:
#          - "openklant.gemeente.nl"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 250m
  #   memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  size: 1Gi
  storageClassName: ""
  existingClaim: null
  mediaMountSubpath: openklant/media
  privateMediaMountSubpath: openklant/private_media

# Existing Secret must be defined for AzureVaultSecret to work
existingSecret: null
# Reference to an existing secret with the values needed for django-setup-configuration
existingConfigurationSecrets: null
# If no secret already exists with the values needed for django-setup-configuration, create it with the following name
configurationSecretsName: ""

# This will create an AzureVaultSecret object in k8s, only Multi Key Value Secret are supported by this chart
# ref: https://akv2k8s.io/tutorials/sync/4-multi-key-value-secret/ https://learn.microsoft.com/en-us/azure/key-vault/secrets/multiline-secrets
# Using this feature requires you to define existingSecret
azureVaultSecret:
  # The name of the Azure Key Vault, setting this will create the AzureVaultSecret
  vaultName: null
  # The name of the Multi Key Value Secret
  objectName: ""
  # Make sure this matches the content of the secret, can be either 'application/x-json' or 'application/x-yaml'
  contentType: ""
  # You must set .Values.existingSecret
  secretName: "{{ .Values.existingSecret }}"

# -- Array with extra environment variables to add
extraEnvVars: []
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"

# -- Optionally specify extra list of additional volumes
extraVolumes: []
# e.g:
# extraVolumes:
#   - name: verify-certs
#     configMap:
#       name: verify-certs

# -- Optionally specify extra list of additional volumeMounts
extraVolumeMounts: []
# e.g:
# extraVolumeMounts:
#  - name: verify-certs
#    mountPath: /etc/ssl/certs/extra-certs/

# -- Extra objects to deploy (value evaluated as a template)
extraDeploy: []
# extraDeploy: 
# - |
#     apiVersion: v1
#     kind: ConfigMap
#     metadata:
#       name: openklant-extra
#       labels:
#         app.kubernetes.io/version: "2.5.0"
#         helm.sh/chart: openklant-1.6.3
#         app.kubernetes.io/instance: openklant
#         app.kubernetes.io/name: openklant
#     data:
#       TEST: "hello"

settings:
  allowedHosts: ""
  djangoSettingsModule: openklant.conf.docker
  useXForwardedHost: true

  # -- Generate secret key at https://djecrety.ir/
  secretKey: ""

  # -- sets the 'ENVIRONMENT' variable
  environment: ""

  elasticapm:
    url: ""
    token: ""
    serviceName: ""

  database:
    host: ""
    port: 5432
    username: ""
    password: ""
    name: ""
    sslmode: prefer

  email:
    host: localhost
    port: 25
    username: ""
    password: ""
    useTLS: false
    defaultFrom: ""

  sentry:
    dsn: ""

  isHttps: true

  notificationsDisabled: false

  debug: false

  # -- Disable two factor authentication
  disable2fa: false

  uwsgi:
    master: ''
    threads: ''
    processes: ''
    maxRequests: ''
    harakiri: ''

  # Celery cache settings, when the redis subchart is enabled these settings will be ignored and caching will default to the redis subchart services
  celery:
    # e.g.:
    # brokerUrl: redis://openklant-redis-master:6379/1
    # resultBackend: redis://openklant-redis-master:6379/1
    brokerUrl: ""
    resultBackend: ""
    logLevel: debug

worker:
  replicaCount: 2
  concurrency: 4
  podLabels: { }
  resources: { }
    # requests:
    #   cpu: 250m
    #   memory: 256Mi
  livenessProbe:
    enabled: false
    exec:
      command:
        - /bin/sh
        - -c
        - celery --workdir src --app openklant.celery inspect --destination celery@${HOSTNAME} active
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80


nginx:
  image:
    repository: nginxinc/nginx-unprivileged
    pullPolicy: IfNotPresent
    tag: stable
  existingConfigmap: null
  # extraVolumes Optionally specify extra list of additional volumes
  # e.g:
  # extraVolumes:
  #   - name: tmp
  #     emptyDir: {}
  #
  extraVolumes: []
  # extraVolumeMounts Optionally specify extra list of additional volumeMounts
  # e.g:
  # extraVolumeMounts:
  #   - name: tmp
  #     mountPath: /tmp
  extraVolumeMounts: []
  config:
    clientMaxBodySize: 10M
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  replicaCount: 1
  podLabels: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101
  autoscaling:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  resources: {}
  
##################
# Redis subchart #
##################
redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      requests:
        cpu: 250m
        memory: 256Mi

