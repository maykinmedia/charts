global:
  configuration:
    enabled: false
    overwrite: true
    secrets: {}

  settings:
    # -- Global databasehost, overrides setting.database.host
    databaseHost: ""

configuration:
  enabled: false
  overwrite: true
  superuser:
    username: ""
    password: ""
    email: ""
  initContainer:
    # -- Run the setup configuration command in a init container
    enabled: true
  job:
    # -- Run the setup configuration command as a job
    enabled: false
    backoffLimit: 6
    restartPolicy: OnFailure
    resources: {}
      # limits:
      #   cpu: 200m
      #   memory: 256Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  secrets: {}
  data: ""
  # e.g.
  # data: |-
  #   oidc_db_config_enable: True
  #   oidc_db_config_admin_auth:
  #     items:
  #     - identifier: admin-oidc
  #       enabled: True
  #       oidc_rp_client_id: opennotificaties.example.nl
  #       oidc_rp_client_secret:
  #         value_from:
  #           env: keycloak_client_secret
  #       oidc_rp_scopes_list:
  #       - openid
  #       - email
  #       - profile
  #       - roles
  #       oidc_rp_sign_algo: RS256
  #       endpoint_config:
  #         oidc_op_discovery_endpoint: https://keycloak.example.nl/realms/example/
  #       username_claim:
  #       - sub
  #       groups_claim:
  #       - roles
  #       claim_mapping:
  #         first_name:
  #         - given_name
  #         last_name:
  #         - family_name
  #         email:
  #         - email
  #       sync_groups: true
  #       sync_groups_glob_pattern: "*"
  #       default_groups: []
  #       make_users_staff: true
  #       superuser_group_names:
  #       - Superuser
  #       oidc_use_nonce: true
  #       oidc_nonce_size: 32
  #       oidc_state_size: 32
  #       userinfo_claims_source: id_token
  #   zgw_consumers_config_enable: True
  #   zgw_consumers:
  #     services:
  #       - identifier: autorisaties-api
  #         label: Autorisaties API
  #         api_root: https://openzaak.example.nl/autorisaties/api/v1/
  #         api_type: ac
  #         auth_type: zgw
  #         client_id: open-notificaties
  #         secret: 
  #           value_from:
  #             env: opennotificaties_autorisatie_api_secret
  #         user_id: open-notificaties
  #         user_representation: Open Notificaties
  #   autorisaties_api_config_enable: True
  #   autorisaties_api:
  #     # Configure Open Notificaties to make use of Open Zaak's Autorisaties API
  #     authorizations_api_service_identifier: autorisaties-api
  #   vng_api_common_credentials_config_enable: True
  #   vng_api_common_credentials:
  #     items:
  #     # Credentials for Open Zaak to be able to make requests to Open Notificaties
  #     - identifier: open-zaak
  #       secret: 
  #         value_from:
  #           env: opennotificaties_openzaak_vng_api_common_secret
  #     # Credentials for Open Notificaties, required for autorisaties subscription
  #     - identifier: open-notificaties
  #       secret: 
  #         value_from:
  #           env: opennotificaties_autorisaties_vng_api_common_secret
  #   notifications_kanalen_config_enable: true
  #   notifications_kanalen_config:
  #     items:
  #       - naam: autorisaties
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/autorisaties
  #         filters: []
  #       - naam: besluittypen
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/besluittypen
  #         filters:
  #           - catalogus
  #       - naam: informatieobjecttypen
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/informatieobjecttypen
  #         filters:
  #           - catalogus
  #       - naam: zaaktypen
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/zaaktypen
  #         filters:
  #           - catalogus
  #       - naam: zaken
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/zaken
  #         filters:
  #           - bronorganisatie
  #           - zaaktype
  #           - vertrouwelijkheidaanduiding
  #       - naam: documenten
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/documenten
  #         filters:
  #           - bronorganisatie
  #           - informatieobjecttype
  #           - vertrouwelijkheidaanduiding
  #       - naam: besluiten
  #         documentatie_link: https://openzaak.example.nl/ref/kanalen/#/besluiten
  #         filters:
  #           - verantwoordelijke_organisatie
  #           - besluittype
  #   notifications_abonnementen_config_enable: true
  #   notifications_abonnementen_config:
  #     items:
  #       - uuid: ff5a9438-6512-4c2d-b69e-6c512c466fb8
  #         callback_url: https://openzaak.example.nl/api/v1/callback
  #         auth: Token foo
  #         kanalen:
  #           - filters:
  #               zaaktype: https://openzaak.example.nl/catalogi/api/v1/zaaktypen/d0b3a90d-7959-4699-8bdb-bf228aef5e21
  #             naam: zaken
  #           - filters:
  #               vertrouwelijkheidaanduiding: beperkt_openbaar
  #             naam: zaken
  #       - uuid: 03baec5a-93ef-4ba6-bb73-c548c12009a2
  #         callback_url: https://openzaak.example.nl/api/v1/other-callback
  #         auth: Token bar
  #         kanalen:
  #           - naam: zaken
  #   sites_config_enable: true
  #   sites_config:
  #     items:
  #       - domain: opennotificaties.test.opengem.nl
  #         name: Open Notificaties

tags:
  redis: true
  rabbitmq: true

replicaCount: 2

image:
  repository: openzaak/open-notificaties
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  className: ""
  # -- ingress hosts
  hosts: []
  #  - host: opennotificaties.gemeente.nl
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: opennotificaties-tls
  #    hosts:
  #      - opennotificaties.gemeente.nl

# -- Specify extra ingresses, for example if you have multiple ingress classes
extraIngress: []
# e.g:
# extraIngress:
#  - name: opennotificaties-azuregateway
#    annotations:
#      appgw.ingress.kubernetes.io/ssl-redirect: "true"
#    className: azure-application-gateway
#    hosts:
#      - host: opennotificaties.gemeente.nl
#        paths:
#          - path: /
#            pathType: ImplementationSpecific
#            servicename: opennotificaties
#            portNumber: 8000
#    tls:
#      - secretName: opennotificaties-tls
#        hosts:
#          - "opennotificaties.gemeente.nl"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 250m
  #   memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  behavior: {}

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  size: 512Mi
  storageClassName: ""
  existingClaim: null
  mediaMountSubpath: opennotificaties/media

# Existing Secret must be defined for AzureVaultSecret to work
existingSecret: null
# Reference to an existing secret with the values needed for django-setup-configuration
existingConfigurationSecrets: null
# If no secret already exists with the values needed for django-setup-configuration, create it with the following name
configurationSecretsName: ""

# This will create an AzureVaultSecret object in k8s, only Multi Key Value Secret are supported by this chart
# ref: https://akv2k8s.io/tutorials/sync/4-multi-key-value-secret/ https://learn.microsoft.com/en-us/azure/key-vault/secrets/multiline-secrets
# Using this feature requires you to define existingSecret
azureVaultSecret:
  # The name of the Azure Key Vault, setting this will create the AzureVaultSecret
  vaultName: null
  # The name of the Multi Key Value Secret
  objectName: ""
  # Make sure this matches the content of the secret, can be either 'application/x-json' or 'application/x-yaml'
  contentType: ""
  # You must set .Values.existingSecret
  secretName: "{{ .Values.existingSecret }}"

# -- Array with extra environment variables to add
extraEnvVars: []
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"

# -- Optionally specify extra list of additional volumes
extraVolumes: []
# e.g:
# extraVolumes:
#   - name: verify-certs
#     configMap:
#       name: verify-certs

# -- Optionally specify extra list of additional volumeMounts
extraVolumeMounts: []
# e.g:
# extraVolumeMounts:
#  - name: verify-certs
#    mountPath: /etc/ssl/certs/extra-certs/

# -- Path to extra certificates or CA (root) certificates, comma seperated
# Warning, If the file does not exist the pod(s) will not start
extraVerifyCerts: ""
# e.g.
# extraVerifyCerts: /etc/ssl/certs/extra-certs/staatdernederlandeng1.pem

settings:
  allowedHosts: ""
  djangoSettingsModule: nrc.conf.docker
  useXForwardedHost: true

  # -- When set to true notifications are saved to the database and accessible from the admin interface
  logNotifications: true
  cleanOldNotifications:
    # -- Clean logged notifications
    enabled: false
    # -- Number of days to retain logged notifications, default is 30 days
    daysRetained: ""
    cronjob:
      # -- Schedule to run the clean logged notifications cronjob
      schedule: "0 0 * * *"
      historyLimit: 1
      resources: {}

  # -- The maximum number of automatic retries. After this amount of retries, Open Notificaties stops trying to deliver the message. Application default is 5.
  maxRetries: ""
  # --  If specified, a factor applied to the exponential backoff. This allows you to tune how quickly automatic retries are performed. Application default is 3.
  retryBackoff: ""
  # -- An upper limit to the exponential backoff time. Application default is 48.
  retryBackoffMax: ""

  # -- Timeout in seconds for HTTP requests.
  requestsTimeout: 10

  # -- Generate secret key at https://djecrety.ir/
  secretKey: ""

  # -- sets the 'ENVIRONMENT' variable
  environment: ""

  database:
    host: ""
    port: 5432
    username: ""
    password: ""
    name: ""
    sslmode: prefer
    db_conn_max_age: 60
    # @section Django DB Pool Configuration
    # Django database connection pool settings.
    # These are the default values used by Django and the application; change them if your app requires more connections or different timeouts.
    db_pool:
      enabled: false
      db_pool_min_size: 4 
      db_pool_max_size: 4
      db_pool_timeout: 30
      db_pool_max_waiting: 0
      db_pool_max_lifetime: 3600
      db_pool_max_idle: 600
      db_pool_reconnect_timeout: 300
      db_pool_num_workers: 3

  # -- use 2 if enabling ingress
  numProxies: 1

  # -- Disable two factor authentication
  disable2fa: false

  email:
    host: localhost
    port: 25
    username: ""
    password: ""
    useTLS: false
    defaultFrom: ""

  flower:
    urlPrefix: ""
    basicAuth: ""

  elasticapm:
    url: ""
    token: ""
    serviceName: ""

  sentry:
    dsn: ""

  cache:
    # -- Sets 'CACHE_DEFAULT' var, only required when tags.redis is false
    default: ""
    # -- Sets 'CACHE_AXES' var, only required when tags.redis is false
    axes: ""
    # When not using the redis subcharts you can set them manually like this:
    # default: myredisserver:6379/0
    # axes: myredisserver:6379/0

  celery:
    # -- Celery loglevel
    logLevel: debug
    # -- Sets the 'CELERY_BROKER_URL' var, only required when tags.rabbitmq is false
    brokerUrl: ""
    # -- Sets the 'CELERY_RESULT_EXPIRES' var
    resultExpires: 3600
    # -- Sets the 'CELERY_RESULT_BACKEND' var, only required when tags.redis is false
    resultBackend: ""
    # -- Sets the 'PUBLISH_BROKER_URL' var, only required when tags.rabbitmq is false
    publishBrokerUrl: ""
    # -- RabbitMQ server hostname
    rabbitmqHost: ""
    # When not using the rabbitmq / redis subcharts you can set them manually like this:
    #
    # brokerUrl: amqp://username:password@myrabbitmqbroker:5672//
    # resultBackend: redis://myredisserver:6379/1
    # publishBrokerUrl: amqp://username:password@myrabbitmqbroker::5672/%2F
    # rabbitmqHost: myrabbitmqbroker

  isHttps: true

  debug: false

  uwsgi:
    master: ''
    threads: ''
    processes: ''
    maxRequests: ''
    harakiri: ''
  # -- Defines the primary domain where the application is hosted. Defaults to ""
  siteDomain: ""
  # -- Default value "INFO" ; Available values are CRITICAL, ERROR, WARNING, INFO and DEBUG
  logLevel: "INFO"
  # -- Time leeway in seconds for JWT validation timestamps
  # Accounts for clock drift between server and client
  # Default: nil (uses Django default, typically 0 seconds)
  # Recommended: not to increase above 300 seconds
  timeLeeway: nil  

worker:
  replicaCount: 2
  concurrency: 4
  podLabels: {}
  resources: {}
  maxWorkerLivenessDelta: ""
  livenessProbe:
    enabled: false
    exec:
      command:
        - /bin/sh
        - -c
        - celery --workdir src --app nrc.celery inspect --destination celery@${HOSTNAME} active
    initialDelaySeconds: 60
    # Periodeseconds should not exceed maxWorkerLivenessDelta
    periodSeconds: 50
    timeoutSeconds: 15
    failureThreshold: 10
    successThreshold: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    behavior: {}
  resources: {}
    # requests:
    #   cpu: 250m
    #   memory: 256Mi

  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""

flower:
  enabled: false
  replicaCount: 1
  podLabels: {}
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources: {}

beat:
  replicaCount: 1
  podLabels: {}
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources: {}  
    # requests:
    #   cpu: 250m
    #   memory: 256Mi

##################
# Redis subchart #
##################

redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
  # -- Redis image configuration - Migration from Bitnami to official Redis image        
  image:
    registry: docker.io  # Docker registry for Redis image
    repository: redis  # Official Redis image (migrated from Bitnami)
    tag: "8.0"  # Official Redis image pinned version    

#####################
# RabbitMQ subchart #
#####################

rabbitmq:
  auth:
    username: user
    # DUMMY PASSWORD: Required for Helm upgrade validation when using existing secrets
    # This value satisfies the Bitnami chart's upgrade checks but is never used.    
    password: "dummy"
    erlangCookie: ""
    # existingPasswordSecret: opennotificaties-rabbitmq
    # existingErlangSecret: opennotificaties-rabbitmq    
    # NOTE: If you remove existingPasswordSecret configuration and want to use direct passwords,
    # change the password above from "dummy" to your actual RabbitMQ password.     
  persistence:
    enabled: false
    size: 1Gi
    existingClaim: null
  resources: {}
    # limits:
    #   memory: 1000Mi
    #   cpu: 500m
    # requests:
    #   memory: 300Mi
    #   cpu: 256m
  rbac:
    create: false
  clustering:
    enabled: false
  image:
    registry: docker.io
    repository: bitnamilegacy/rabbitmq
    tag: 4.1.3-debian-12-r0
  # -- RabbitMQ configuration file content
  # This configuration will be appended to the default RabbitMQ configuration
  # It will be mounted as /bitnami/rabbitmq/conf/rabbitmq.conf in the RabbitMQ container
  # The mount name is "configuration"
  # consumer_timeout: RabbitMQ's default consumer timeout is 30 minutes, but OpenNotificaties
  # schedules tasks that can be further in the future. This timeout prevents errors when tasks
  # are scheduled more than 30 minutes ahead. Set to 24 hours (86400000ms) to ensure compatibility.
  # You can customize these settings by modifying the values below
  extraConfiguration: |-
    consumer_timeout = 86400000